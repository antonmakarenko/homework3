{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/email-validator.directive.ts","webpack:///./src/app/email-validator.function.ts","webpack:///./src/app/forgot-password/forgot-password.component.html","webpack:///./src/app/forgot-password/forgot-password.component.ts","webpack:///./src/app/login-form/login-form.component.html","webpack:///./src/app/login-form/login-form.component.ts","webpack:///./src/app/page-not-found/page-not-found.component.html","webpack:///./src/app/page-not-found/page-not-found.component.ts","webpack:///./src/app/signup-form/signup-form.component.html","webpack:///./src/app/signup-form/signup-form.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport {LoginFormComponent} from './login-form/login-form.component';\nimport {SignupFormComponent} from './signup-form/signup-form.component';\nimport {PageNotFoundComponent} from './page-not-found/page-not-found.component';\nimport {ForgotPasswordComponent} from './forgot-password/forgot-password.component';\n\nconst routes: Routes = [\n    {\n        path: 'login',\n        component: LoginFormComponent,\n    },\n    {\n        path: 'password-recovery',\n        outlet: 'primary',\n        component: ForgotPasswordComponent,\n    },\n    {\n        path: 'signup',\n        component: SignupFormComponent\n    },\n    {\n        path: '',\n        redirectTo: '/login',\n        pathMatch: 'full'\n    },\n    {\n        path: '**',\n        component: PageNotFoundComponent\n    }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","module.exports = \"<div class=\\\"form\\\">\\n\\n  <ul class=\\\"tab-group\\\">\\n    <li class=\\\"tab\\\"><a routerLink=\\\"/signup\\\" routerLinkActive=\\\"active\\\">Sign Up</a></li>\\n    <li class=\\\"tab\\\"><a routerLink=\\\"/login\\\" routerLinkActive=\\\"active\\\">Log In</a></li>\\n  </ul>\\n\\n  <div class=\\\"tab-content\\\">\\n    <router-outlet></router-outlet>\\n  </div>\\n</div>\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n})\nexport class AppComponent {\n\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { LoginFormComponent } from './login-form/login-form.component';\nimport { SignupFormComponent } from './signup-form/signup-form.component';\nimport { PageNotFoundComponent } from './page-not-found/page-not-found.component';\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {EmailValidatorDirective} from './email-validator.directive';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    LoginFormComponent,\n    SignupFormComponent,\n    PageNotFoundComponent,\n    ForgotPasswordComponent,\n    EmailValidatorDirective\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    FormsModule,\n    ReactiveFormsModule,\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import {Directive, Input} from '@angular/core';\nimport {AbstractControl, NG_VALIDATORS, Validator} from '@angular/forms';\nimport emailValidator from './email-validator.function';\n\n@Directive({\n    selector: '[appValidEmail]',\n    providers: [{provide: NG_VALIDATORS, useExisting: EmailValidatorDirective, multi: true}]\n})\nexport class EmailValidatorDirective implements Validator {\n    validate(control: AbstractControl): {[key: string]: any} | null {\n        return emailValidator()(control);\n    }\n}\n\n\n","import {AbstractControl, ValidatorFn} from '@angular/forms';\n\nexport default function emailValidator(): ValidatorFn {\n    return (control: AbstractControl): {[key: string]: any} | null => {\n        const regex = new RegExp(/^[a-z\\d\\.\\-_]+@[a-zd\\.-_]+\\.[a-z\\d]{2,4}$/, 'i');\n        const isValid = regex.test(control.value);\n        return !isValid ? {invalidEmail: {value: control.value}} : null;\n    };\n}\n","module.exports = \"<div id=\\\"password-recovery\\\">\\n  <h1>Password Recovery</h1>\\n\\n  <form action=\\\"/\\\" method=\\\"post\\\">\\n\\n    <div class=\\\"field-wrap\\\">\\n      <label>\\n        Email Address<span class=\\\"req\\\">*</span>\\n      </label>\\n      <input type=\\\"email\\\" required autocomplete=\\\"off\\\">\\n    </div>\\n\\n    <div class=\\\"field-wrap\\\">\\n        <label class=\\\"checkbox\\\">\\n        <input type=\\\"checkbox\\\">\\n        <span>I am a human</span>\\n        </label>\\n    </div>\\n\\n    <button type=\\\"button\\\" class=\\\"button button-block\\\">Send</button>\\n\\n  </form>\\n\\n</div>\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-forgot-password',\n  templateUrl: './forgot-password.component.html',\n})\nexport class ForgotPasswordComponent {\n\n}\n","module.exports = \"<div id=\\\"login\\\">\\n\\n  <h1>Welcome Back!</h1>\\n\\n  <form #f=\\\"ngForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n\\n    <div class=\\\"field-wrap\\\">\\n      <label>\\n        Email Address<span class=\\\"req\\\">*</span>\\n      </label>\\n      <input type=\\\"email\\\" required autocomplete=\\\"off\\\" name=\\\"email\\\" [(ngModel)]=\\\"credentials.email\\\" appValidEmail #e=\\\"ngModel\\\">\\n      <div *ngIf=\\\"e.errors\\\" [hidden]=\\\"e.valid || e.pristine\\\" class=\\\"alert alert-danger\\\">\\n        <div *ngIf=\\\"e.errors.required\\\">\\n          Email address is required\\n        </div>\\n        <div *ngIf=\\\"!e.errors.required && e.errors?.invalidEmail\\\">\\n          \\\"{{e.errors.invalidEmail.value}}\\\" is not a valid email address.\\n        </div>\\n      </div>\\n    </div>\\n\\n    <div class=\\\"field-wrap\\\">\\n      <label>\\n        Password<span class=\\\"req\\\">*</span>\\n      </label>\\n      <input type=\\\"password\\\" required autocomplete=\\\"off\\\" name=\\\"password\\\" [(ngModel)]=\\\"credentials.password\\\" #p=\\\"ngModel\\\">\\n      <div [hidden]=\\\"p.valid || p.pristine\\\" class=\\\"alert alert-danger\\\">\\n        Password is required\\n      </div>\\n    </div>\\n\\n    <p class=\\\"forgot\\\"><a routerLink=\\\"/password-recovery\\\">Forgot Password?</a></p>\\n\\n    <button type=\\\"submit\\\" class=\\\"button button-block\\\" [disabled]=\\\"!f.form.valid\\\">Log In</button>\\n\\n  </form>\\n\\n</div>\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-login-form',\n  templateUrl: './login-form.component.html',\n})\nexport class LoginFormComponent {\n  public credentials = {email: '', password: ''};\n\n  public onSubmit() {\n    alert('login successful');\n  }\n}\n","module.exports = \"<h1>404 Not Found</h1>\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-page-not-found',\n  templateUrl: './page-not-found.component.html',\n})\nexport class PageNotFoundComponent {\n\n}\n","module.exports = \"<div id=\\\"signup\\\" [formGroup]=\\\"f\\\">\\n\\n  <h1>Sign Up for Free</h1>\\n\\n    <div class=\\\"top-row\\\">\\n      <div class=\\\"field-wrap\\\">\\n        <label>\\n          First Name<span class=\\\"req\\\">*</span>\\n        </label>\\n        <input type=\\\"text\\\" autocomplete=\\\"off\\\" formControlName=\\\"firstName\\\" (keyup)=\\\"makeSnow($event.currentTarget.value)\\\" />\\n      </div>\\n\\n      <div class=\\\"field-wrap\\\">\\n        <label>\\n          Last Name<span class=\\\"req\\\">*</span>\\n        </label>\\n        <input type=\\\"text\\\" autocomplete=\\\"off\\\" formControlName=\\\"lastName\\\" />\\n      </div>\\n    </div>\\n\\n    <div class=\\\"field-wrap\\\">\\n      <label>\\n        Email Address<span class=\\\"req\\\">*</span>\\n      </label>\\n      <input type=\\\"email\\\" autocomplete=\\\"off\\\" formControlName=\\\"email\\\" />\\n    </div>\\n\\n\\n    <div formGroupName=\\\"passwords\\\" class=\\\"form-group\\\">\\n      <div class=\\\"field-wrap\\\">\\n        <label>\\n          Set A Password<span class=\\\"req\\\">*</span>\\n        </label>\\n        <input type=\\\"password\\\" autocomplete=\\\"off\\\" formControlName=\\\"password\\\" />\\n      </div>\\n\\n      <div class=\\\"field-wrap\\\">\\n        <label>\\n          Repeat Password<span class=\\\"req\\\">*</span>\\n        </label>\\n        <input type=\\\"password\\\" autocomplete=\\\"off\\\" formControlName=\\\"passwordRepeat\\\" />\\n      </div>\\n    </div>\\n\\n    <pre *ngIf=\\\"f.pending\\\">please wait...</pre>\\n\\n    <button type=\\\"button\\\" class=\\\"button button-block\\\" [disabled]=\\\"!f.valid\\\" (click)=\\\"submit()\\\">Get Started</button>\\n\\n</div>\\n\"","import { Component } from '@angular/core';\nimport {FormControl, FormGroup, ValidationErrors, Validators} from '@angular/forms';\nimport {Observable, of} from 'rxjs';\nimport {delay} from 'rxjs/operators';\nimport emailValidator from '../email-validator.function';\n\n@Component({\n  selector: 'app-signup-form',\n  templateUrl: './signup-form.component.html',\n})\nexport class SignupFormComponent {\n  public f = new FormGroup({\n    firstName: new FormControl('', [Validators.required]),\n    lastName: new FormControl('', [Validators.required]),\n    email: new FormControl('', [Validators.required, emailValidator()]),\n    passwords: new FormGroup(\n        {\n          password: new FormControl('', {validators: [Validators.required], updateOn: 'blur'}),\n          passwordRepeat: new FormControl('', [Validators.required]),\n        },\n        {asyncValidators: this._asyncValidatorEquals}\n    )\n  });\n\n  private makeSnow(value: string) {\n    const regex = new RegExp(/^jon$/, 'i');\n    if (regex.test(value)) {\n      this.f.patchValue({lastName: 'Snow', email: 'jon_snow@example.com'});\n      this.f.controls.lastName.markAsDirty();\n      this.f.controls.email.markAsDirty();\n    }\n  }\n\n  private _asyncValidatorEquals({ value }: FormGroup): Observable<ValidationErrors|null> {\n    const [passKey, repeatKey] = Object.keys(value);\n    const result = value[passKey] === value[repeatKey] ? null : { notEqual: true };\n      console.log(value, result);\n    return of<ValidationErrors|null>(result).pipe(delay(2000));\n  }\n\n  public submit() {\n    alert('Very good ( ͡° ͜ʖ ͡°)');\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}